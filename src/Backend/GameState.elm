--THIS IS AN AUTOGENERATED FILES, DO NOT MODIFY
module GameState where

import Json.Decode
import Json.Decode exposing ((:=))
import Json.Encode exposing (Value)
-- The following module comes from bartavelle/json-helpers
import Json.Helpers exposing (..)
import Math.Vector2 exposing (..)
import Dict exposing (Dict)


jsonDecVec2 = Json.Decode.object2 vec2
  ("x" := Json.Decode.float)
  ("y" := Json.Decode.float)

jsonEncVec2 vector =
  let (x,y) = toTuple vector
  in  Json.Encode.object [("x", Json.Encode.float x), ("y", Json.Encode.float y)]

type alias GameState  =
   { players: (Dict String Entity)
   , projectiles: (Dict String Bullet)
   , enemies: (List Entity)
   , hits: (List Vec2)
   }

jsonDecGameState : Json.Decode.Decoder ( GameState )
jsonDecGameState =
   ("players" := Json.Decode.dict (jsonDecEntity)) `Json.Decode.andThen` \pplayers ->
   ("projectiles" := Json.Decode.dict (jsonDecBullet)) `Json.Decode.andThen` \pprojectiles ->
   ("enemies" := Json.Decode.list (jsonDecEntity)) `Json.Decode.andThen` \penemies ->
   ("hits" := Json.Decode.list (jsonDecVec2)) `Json.Decode.andThen` \phits ->
   Json.Decode.succeed {players = pplayers, projectiles = pprojectiles, enemies = penemies, hits = phits}

jsonEncGameState : GameState -> Value
jsonEncGameState  val =
   Json.Encode.object
   [ ("players", encodeMap (Json.Encode.string) (jsonEncEntity) val.players)
   , ("projectiles", encodeMap (Json.Encode.string) (jsonEncBullet) val.projectiles)
   , ("enemies", (Json.Encode.list << List.map jsonEncEntity) val.enemies)
   , ("hits", (Json.Encode.list << List.map jsonEncVec2) val.hits)
   ]



type alias Entity  =
   { hp: Int
   , location: Location
   }

jsonDecEntity : Json.Decode.Decoder ( Entity )
jsonDecEntity =
   ("hp" := Json.Decode.int) `Json.Decode.andThen` \php ->
   ("location" := jsonDecLocation) `Json.Decode.andThen` \plocation ->
   Json.Decode.succeed {hp = php, location = plocation}

jsonEncEntity : Entity -> Value
jsonEncEntity  val =
   Json.Encode.object
   [ ("hp", Json.Encode.int val.hp)
   , ("location", jsonEncLocation val.location)
   ]



type alias Bullet  =
   { uuid: Int
   , location: Location
   , velocity: Float
   , playerId: String
   }

jsonDecBullet : Json.Decode.Decoder ( Bullet )
jsonDecBullet =
   ("uuid" := Json.Decode.int) `Json.Decode.andThen` \puuid ->
   ("location" := jsonDecLocation) `Json.Decode.andThen` \plocation ->
   ("velocity" := Json.Decode.float) `Json.Decode.andThen` \pvelocity ->
   ("playerId" := Json.Decode.string) `Json.Decode.andThen` \pplayerId ->
   Json.Decode.succeed {uuid = puuid, location = plocation, velocity = pvelocity, playerId = pplayerId}

jsonEncBullet : Bullet -> Value
jsonEncBullet  val =
   Json.Encode.object
   [ ("uuid", Json.Encode.int val.uuid)
   , ("location", jsonEncLocation val.location)
   , ("velocity", Json.Encode.float val.velocity)
   , ("playerId", Json.Encode.string val.playerId)
   ]



type alias Hit  =
   { uuid: Int
   , player: Entity
   , bullet: Bullet
   }

jsonDecHit : Json.Decode.Decoder ( Hit )
jsonDecHit =
   ("uuid" := Json.Decode.int) `Json.Decode.andThen` \puuid ->
   ("player" := jsonDecEntity) `Json.Decode.andThen` \pplayer ->
   ("bullet" := jsonDecBullet) `Json.Decode.andThen` \pbullet ->
   Json.Decode.succeed {uuid = puuid, player = pplayer, bullet = pbullet}

jsonEncHit : Hit -> Value
jsonEncHit  val =
   Json.Encode.object
   [ ("uuid", Json.Encode.int val.uuid)
   , ("player", jsonEncEntity val.player)
   , ("bullet", jsonEncBullet val.bullet)
   ]



type alias Location  =
   { position: Vec2
   , orientation: Vec2
   }

jsonDecLocation : Json.Decode.Decoder ( Location )
jsonDecLocation =
   ("position" := jsonDecVec2) `Json.Decode.andThen` \pposition ->
   ("orientation" := jsonDecVec2) `Json.Decode.andThen` \porientation ->
   Json.Decode.succeed {position = pposition, orientation = porientation}

jsonEncLocation : Location -> Value
jsonEncLocation  val =
   Json.Encode.object
   [ ("position", jsonEncVec2 val.position)
   , ("orientation", jsonEncVec2 val.orientation)
   ]

