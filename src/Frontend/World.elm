--THIS IS AN AUTOGENERATED FILES, DO NOT MODIFY
module World where

import Json.Decode
import Json.Decode exposing ((:=))
import Json.Encode exposing (Value)
-- The following module comes from bartavelle/json-helpers
import Json.Helpers exposing (..)
import Math.Vector2 exposing (..)
import Dict exposing (Dict)


jsonDecVec2 = Json.Decode.object2 vec2
  ("x" := Json.Decode.float)
  ("y" := Json.Decode.float)

jsonEncVec2 vector =
  let (x,y) = toTuple vector
  in  Json.Encode.object [("x", Json.Encode.float x), ("y", Json.Encode.float y)]

type alias World  =
   { players: (Dict String Player)
   , projectiles: (List Bullet)
   , ennemies: (List Enemy)
   , hits: (List Hit)
   }

jsonDecWorld : Json.Decode.Decoder ( World )
jsonDecWorld =
   ("players" := Json.Decode.dict (jsonDecPlayer)) `Json.Decode.andThen` \pplayers ->
   ("projectiles" := Json.Decode.list (jsonDecBullet)) `Json.Decode.andThen` \pprojectiles ->
   ("ennemies" := Json.Decode.list (jsonDecEnemy)) `Json.Decode.andThen` \pennemies ->
   ("hits" := Json.Decode.list (jsonDecHit)) `Json.Decode.andThen` \phits ->
   Json.Decode.succeed {players = pplayers, projectiles = pprojectiles, ennemies = pennemies, hits = phits}

jsonEncWorld : World -> Value
jsonEncWorld  val =
   Json.Encode.object
   [ ("players", encodeMap (Json.Encode.string) (jsonEncPlayer) val.players)
   , ("projectiles", (Json.Encode.list << List.map jsonEncBullet) val.projectiles)
   , ("ennemies", (Json.Encode.list << List.map jsonEncEnemy) val.ennemies)
   , ("hits", (Json.Encode.list << List.map jsonEncHit) val.hits)
   ]



type alias Player  =
   { puuid: String
   , php: Int
   , pposition: Vec2
   , porientation: Vec2
   }

jsonDecPlayer : Json.Decode.Decoder ( Player )
jsonDecPlayer =
   ("puuid" := Json.Decode.string) `Json.Decode.andThen` \ppuuid ->
   ("php" := Json.Decode.int) `Json.Decode.andThen` \pphp ->
   ("pposition" := jsonDecVec2) `Json.Decode.andThen` \ppposition ->
   ("porientation" := jsonDecVec2) `Json.Decode.andThen` \pporientation ->
   Json.Decode.succeed {puuid = ppuuid, php = pphp, pposition = ppposition, porientation = pporientation}

jsonEncPlayer : Player -> Value
jsonEncPlayer  val =
   Json.Encode.object
   [ ("puuid", Json.Encode.string val.puuid)
   , ("php", Json.Encode.int val.php)
   , ("pposition", jsonEncVec2 val.pposition)
   , ("porientation", jsonEncVec2 val.porientation)
   ]



type alias Enemy  =
   { euuid: String
   , ehp: Int
   , eposition: Vec2
   , eorientation: Vec2
   }

jsonDecEnemy : Json.Decode.Decoder ( Enemy )
jsonDecEnemy =
   ("euuid" := Json.Decode.string) `Json.Decode.andThen` \peuuid ->
   ("ehp" := Json.Decode.int) `Json.Decode.andThen` \pehp ->
   ("eposition" := jsonDecVec2) `Json.Decode.andThen` \peposition ->
   ("eorientation" := jsonDecVec2) `Json.Decode.andThen` \peorientation ->
   Json.Decode.succeed {euuid = peuuid, ehp = pehp, eposition = peposition, eorientation = peorientation}

jsonEncEnemy : Enemy -> Value
jsonEncEnemy  val =
   Json.Encode.object
   [ ("euuid", Json.Encode.string val.euuid)
   , ("ehp", Json.Encode.int val.ehp)
   , ("eposition", jsonEncVec2 val.eposition)
   , ("eorientation", jsonEncVec2 val.eorientation)
   ]



type alias Bullet  =
   { uuid: Int
   , position: Vec2
   , orientation: Vec2
   , velocity: Float
   , timeStamp: Int
   }

jsonDecBullet : Json.Decode.Decoder ( Bullet )
jsonDecBullet =
   ("uuid" := Json.Decode.int) `Json.Decode.andThen` \puuid ->
   ("position" := jsonDecVec2) `Json.Decode.andThen` \pposition ->
   ("orientation" := jsonDecVec2) `Json.Decode.andThen` \porientation ->
   ("velocity" := Json.Decode.float) `Json.Decode.andThen` \pvelocity ->
   ("timeStamp" := Json.Decode.int) `Json.Decode.andThen` \ptimeStamp ->
   Json.Decode.succeed {uuid = puuid, position = pposition, orientation = porientation, velocity = pvelocity, timeStamp = ptimeStamp}

jsonEncBullet : Bullet -> Value
jsonEncBullet  val =
   Json.Encode.object
   [ ("uuid", Json.Encode.int val.uuid)
   , ("position", jsonEncVec2 val.position)
   , ("orientation", jsonEncVec2 val.orientation)
   , ("velocity", Json.Encode.float val.velocity)
   , ("timeStamp", Json.Encode.int val.timeStamp)
   ]



type alias Hit  =
   { uuid: Int
   , player: Player
   , bullet: Bullet
   }

jsonDecHit : Json.Decode.Decoder ( Hit )
jsonDecHit =
   ("uuid" := Json.Decode.int) `Json.Decode.andThen` \puuid ->
   ("player" := jsonDecPlayer) `Json.Decode.andThen` \pplayer ->
   ("bullet" := jsonDecBullet) `Json.Decode.andThen` \pbullet ->
   Json.Decode.succeed {uuid = puuid, player = pplayer, bullet = pbullet}

jsonEncHit : Hit -> Value
jsonEncHit  val =
   Json.Encode.object
   [ ("uuid", Json.Encode.int val.uuid)
   , ("player", jsonEncPlayer val.player)
   , ("bullet", jsonEncBullet val.bullet)
   ]

