Elm.Player = Elm.Player || {};
Elm.Player.make = function (_elm) {
   "use strict";
   _elm.Player = _elm.Player || {};
   if (_elm.Player.values) return _elm.Player.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Math$Vector2 = Elm.Math.Vector2.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Point = Elm.Point.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var playerBody = $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
                                                    $Color.red,
                                                    $Graphics$Collage.circle(10.0))
                                                    ,A2($Graphics$Collage.filled,
                                                    $Color.black,
                                                    A2($Graphics$Collage.rect,8,40))]));
   var displayPlayer = F2(function (_p0,movable) {
      var _p1 = _p0;
      return _U.list([A2($Graphics$Collage.rotate,
      A2($Point.getOrientation,
      movable.position,
      A3($Point.mapOrientation,_p1._0,_p1._1,movable.orientation)),
      A2($Graphics$Collage.move,
      A2($Debug.watch,
      "position",
      {ctor: "_Tuple2"
      ,_0: $Math$Vector2.getX(movable.position)
      ,_1: $Math$Vector2.getY(movable.position)}),
      playerBody))]);
   });
   var initialPlayer = {position: $Point.origin
                       ,direction: $Point.origin
                       ,orientation: $Point.origin};
   var movePlayer = F2(function (event,player) {
      var _p2 = event;
      switch (_p2.ctor)
      {case "Tick": return _U.update(player,
           {position: A2($Math$Vector2.add,
           player.position,
           player.direction)});
         case "Move": var _p3 = _p2._0;
           return _U.update(player,
           {direction: _p3
           ,position: A2($Math$Vector2.add,player.position,_p3)});
         default: return _U.update(player,{orientation: _p2._0});}
   });
   var Orientation = function (a) {
      return {ctor: "Orientation",_0: a};
   };
   var Move = function (a) {    return {ctor: "Move",_0: a};};
   var Tick = function (a) {    return {ctor: "Tick",_0: a};};
   var playerInput = function () {
      var mouse = A2($Signal.map,
      function (_p4) {
         var _p5 = _p4;
         return Orientation($Math$Vector2.fromRecord({x: $Basics.toFloat(_p5._0)
                                                     ,y: $Basics.toFloat(_p5._1)}));
      },
      $Mouse.position);
      var time = A2($Signal.map,Tick,$Time.fps(30));
      var wasd = A2($Signal.map,
      function (p) {
         return Move($Math$Vector2.fromRecord({x: $Basics.toFloat(p.x)
                                              ,y: $Basics.toFloat(p.y)}));
      },
      $Keyboard.wasd);
      return $Signal.mergeMany(_U.list([time,wasd,mouse]));
   }();
   var managePlayer = A3($Signal.foldp,
   movePlayer,
   initialPlayer,
   playerInput);
   var Player = F3(function (a,b,c) {
      return {position: a,orientation: b,direction: c};
   });
   return _elm.Player.values = {_op: _op
                               ,displayPlayer: displayPlayer
                               ,managePlayer: managePlayer
                               ,Player: Player};
};