name: lens
version: 4.13
id: lens-4.13-095e79131408f851545f881c8eaa7b7c
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Review
                 Control.Lens.Internal.Setter Control.Lens.Internal.TH
                 Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
                 Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
                 Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/fred/Documents/Haskell/Projet/TheLambdaReactor/.stack-work/install/x86_64-linux/ghc-7.8.4/7.8.4/lib/x86_64-linux-ghc-7.8.4/lens-4.13
library-dirs: /home/fred/Documents/Haskell/Projet/TheLambdaReactor/.stack-work/install/x86_64-linux/ghc-7.8.4/7.8.4/lib/x86_64-linux-ghc-7.8.4/lens-4.13
hs-libraries: HSlens-4.13
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-470385a50d2b78598af85cfe9d988e1b
         base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
         base-orphans-0.4.5-2564f6bf3f8ea56dbc79de8e37ae83b6
         bifunctors-5.1-8fd4bbb0f685c06f126e968c57199f7f
         bytestring-0.10.4.0-d6f1d17d717e8652498cab8269a0acd5
         comonad-4.2.7.2-219d41b7012e7329af1b0a92c96c0a83
         containers-0.5.5.1-d4bd887fb97aa3a46cbadc13709b7653
         contravariant-1.3.3-044b269f17d761cf6bf59a84f3700350
         distributive-0.4.4-c10f6d8f4f444057d65ab52cf0d332f5
         exceptions-0.8.0.2-f6f98aadc4a0b0015e88dfc2d5db2e7c
         filepath-1.3.0.2-25a474a9272ae6260626ce0d70ad1cab
         free-4.12.1-8f99c1ad4c5e72fc98ac2b6403e48472
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.3.3-d07189b91d67ae05e907f08e34ff2533
         kan-extensions-4.2.3-ba4ccbac43cab8249625041100153526
         mtl-2.2.1-8c12005da5add6d6822cd8e7586fde6d
         parallel-3.2.1.0-7b6073f248ad1c848a10bbf1b22c1549
         profunctors-5.1.2-bcb29e8ec732a386ffa568950cd77310
         reflection-2.1.1.1-16988b6786d9f30a101b275e9fabdebb
         semigroupoids-5.0.0.4-450ab4c776fb05b4bb31b9a65854cc6c
         semigroups-0.18.0.1-528dda7240f96e7cfedb2c3065f90178
         tagged-0.8.2-d2e101c6d7f9e2f25b5c064a6124563b
         template-haskell-2.9.0.0-6d27c2b362b15abb1822f2f34b9ae7f9
         text-1.2.2.0-5471b6b31541d74fa9bb1c051d20e82b
         transformers-0.4.3.0-f18252835bb81403684b82642c2d19e8
         transformers-compat-0.4.0.4-57c8091ea57afec62c051eda2322cc2f
         unordered-containers-0.2.5.1-4e652dcb3c3c28c4962e6ed743c95c23
         vector-0.11.0.0-8a45ebb7ae954746f36407596c0ee5f6
         void-0.7.1-1631f4359589b993e7a7051643fdafe4
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/fred/Documents/Haskell/Projet/TheLambdaReactor/.stack-work/install/x86_64-linux/ghc-7.8.4/7.8.4/doc/lens-4.13/lens.haddock
haddock-html: /home/fred/Documents/Haskell/Projet/TheLambdaReactor/.stack-work/install/x86_64-linux/ghc-7.8.4/7.8.4/doc/lens-4.13
